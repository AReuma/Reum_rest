public class MethodExplain {
    // 키워드() -> 메서드가 아님
    // 이름() -> 이름뒤에 소괄호가 있으면 메서드

    // f(x) = 2x +1
    // x -> 매개변수
    // 저장공간 =  2 * 값 +1;
    // f(1) 이면 리턴값, 물론 리턴값이 있을경우만


    // 리턴타입 메서드명 (매개변수) {
    // 실행할 문장
    // return 리턴값;
    //}

    // void 메서드명 (자료형 매개변수, ....){
    // 실행할 문장
    //}

    // void 메서드명 (){
    // 실행할 문장
    //}

    // 메서드 선언 순서
    // 1. 메서드 명을 생각한다.
    // 2. 매개변수를 생각한다.
    // 3. 실행할 문장과 리턴값을 생각한다.

    // int add(int num, int num2){
    // sout ("덧셈");
    // return num1 + num2 // -> 리던 값이 뭘까? 정수 + 정수 -> 정수
    //}

    // 매서드 주의사항
    // 1. 매개변수가 없는 메서드는 외부에서 값을 전달 받을 수 없다.
    // 2. 리턴값이 있는 메서드는 사용시 전체를 리턴값으로 보자.
    // 3. 메서드 내부에 다른 메서드를 선얼할 수 없다. (단, 사용은 가능하다)
    // 4. 메서드 선언시 매개변수는 저장공간이고, 사용시에는 값을 그 자리 순서에 맞게 넣어준다.

    // 변수를 사용하는 이유: 반복되는 값을 쉽게 관리하기 위해서
    // 입출력 함수를 사용하는 이유: 개발자가 한 작업에 대해 확인하기 위해서
    // 조건문을 사용하는 이유: 결과가 2가지 이상일 경우 선택을 하기 위해서
    // 반복문을 사용하는 이유: 반복 되는 것들을 쉽게 사용하기 위해서
    // 배열을 사용하는 이유: 반복되는 같은 타입의 변수들을 쉽게 관리하기 위해서
    //
    // 메서드를 사용하는 이유: 반복되는 기능들을 쉽게 관리하기 위해서

    // cmd 창에서 본인이 만든 java파일이 있는 경로로 이동
    // cd 경로
    // javac 클래스명.java -> 컴파일

    // java 클래스 값입력 > main args로 받는다.

    // static은 시작하자마자 메모리에 올라가 있으며, 실행이 끝날때까지 올라가있다.
    // 따라서 static 사용을 제대로 알고 사용하자.

}
