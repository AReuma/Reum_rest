public class Explain {
    // 이름뒤에 소괄호가 있으면 메서드
    // 클래스
    // 클래스를 쓰는 이유 -> 객체지향언어
    // 객체 추상적인걸 객체화 시킨것
    // 클래스: 반죽, 객체화: 빵 반죽, 피자 반죽
    // 클래스 "자동차"라고 만들어 놓고 거기에 색, 브랜드, 가격이 들어있고
    // 그 타입으로 엄마차, 아빠차, 내차를 하자!
    // 왜? -> 차 종류는 많잖아!

    // 클래스는
    // 1. 타입이다
    // 2. 주어

    // 주어    동사   목적어
    // Monkey.eat("빠나나");
    // 메서드를 할때 동사로 지어라!

    /*
    // ** 클래스
    // 공통 요소로 묶자.

    //클래스 선언
    class 클래스명{
      // 필드(변수, 메서드)
    }

    클래스 사용

    클래스명 객체명 = new 클래스명();
    // 객체명의 이름으로 저장공간이 만들어지고
    // 그 안에는 주소값이 들어있다.

    // 주소값은 힙메모리에 있는 필드들의 주소값.

    // . 하위 연산자
    객체명.필드

    객체화(인스턴스)
     추상적인 개념을 실페화 시킨다.
     클래스로 접근하지 않고, 클래스타입의 객체를 만들어서 그 객체로 접근한다.

    생성자
     클래스명()
     초기화의 목적이 있다.
     메서드와 같은 기능을 가지고 있지만, 리턴이 없으며 리턴타입도 없다.
     따라서 메서드라고 부르지 않는다.

    오버 로딩 (OverLoading)
     같은 이름의 메서드라도 매개변수의 갯수 혹은 타입이 다르면 선언이 가능하다.
     */

}
